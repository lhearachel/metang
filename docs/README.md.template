<img src="docs/metang.png" align="right" width="120" alt="In-game sprite of Metang from Pokémon Black and White"/>

# `metang`

A metaprogramming utility to generate enumerated constants from plain-text for C
and Python.

## Table of Contents

<!--toc:start-->
- [Background](#background)
  - [Etymology](#etymology)
- [Install](#install)
  - [Build from Source](#build-from-source)
  - [Integrate with a Meson Project](#integrate-with-a-meson-project)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)
<!--toc:end-->

## Background

C's support for enumerated constants is less than stellar. Member values of
`enum` don't contain any identifying information at runtime, which makes
employing them as waymarks awkward when parsing textual data. An easy way to
ameliorate this is by ingesting some simple input schema containing enumeration
members and generating a header file which exposes both the enumeration and a
lookup table mapping string values to members.

`metang` is a simple implementation of such a program. Its feature-set is basic,
yet allows a user to customize the content of their generated header as they see
fit. The headers that it generates are usable both in data parsing programs in
need of its lookup tables and in production code where only the enumeration
itself is desired.

### Etymology

`metang` takes its moniker from [the Pokémon of the same name][metang-pokedex].

## Install

### Build from Source

```shell
> git clone https://github.com/lhearachel/metang.git
> cd metang
> make install
```

Once installed, verify that you can run the executable:

```shell
> metang -v
{{ VERSION }}
```

By default, `metang` will install to `~/.local/bin`. If you wish to install it
to a different directory, run `make install` with your desired directory as an
argument:

```shell
> DESTDIR=path/to/target make install
```

`metang` will install itself into the `bin` subdirectory of the given value for
`DESTDIR`.

### Integrate with a Meson Project

`metang` also ships with a `meson.build` file to support integration as a Meson
subproject. To add `metang`'s tooling support to your project, create the
following `metang.wrap` file in your `subprojects` directory:

```ini
[wrap-git]
url = https://github.com/lhearachel/metang.git
; Replace <main> here with a release tag or commit hash, if desired.
revision = main
depth = 1

[provide]
program_names = metang
```

## Usage

`metang` will generate a C header from some input file with the following
content sections, each of which is surrounded by a corresponding preprocessor
guard:

1. An `enum` type definition.
2. Preprocessor definitions.
3. A lookup table mapping enumerators to a string identifier.

To illustrate, suppose that we have the following input listing, fed from
standard input:

```text
{{ ENUM_BASE_INPUT }}
```

`metang` will then emit the following to standard output:

```c
{{ ENUM_BASE_OUTPUT }}
```

The default values in this emission are worth noting:

1. `METANG_` as a prefix on all preprocessor guards. This is a simple default to
   make output consistent.
2. `STDOUT` as the suffix on the inclusion sentinels and leading prefix on the
   generated symbols. This is adapted from the output file name.
3. `stdin` as the `enum` tag. This is adapted from the input file name.
4. A starting index of `0` for the enumeration.

All of these defaults are configurable via program options. As a summary of
available options, `metang`'s built-in help-text should be sufficient. For
further reading, each of these options has a corresponding example in the
`tests` directory to illustrate how its behavior differs from the defaults.

```shell
> metang help
{{ HELPTEXT }}
```

For more detailed reading on the various options, `metang`'s installation
procedure will install manual page in section 1. You can view this page by
invoking `man metang`, as with any other shell-based utility.

### Python

`metang` can also generate constants-files for Python using the `--lang` option
with argument `py`:

```shell
> metang --lang py
{{ ENUM_BASE_PY_OUTPUT }}
```

## Contributing

`metang`'s small size and problem-scope mean that contribution guidelines are
loose. Feel free to file an issue or a pull request!

## License

`metang` is free software licensed under the Apache License, version 2.0. For
further details, refer to [the included license text](./LICENSE).

[metang-pokedex]: https://www.pokemon.com/us/pokedex/metang
